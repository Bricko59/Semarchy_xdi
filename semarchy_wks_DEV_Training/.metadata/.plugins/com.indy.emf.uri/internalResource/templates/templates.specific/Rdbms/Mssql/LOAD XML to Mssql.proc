<?xml version="1.0" encoding="UTF-8"?>
<proc:process xmlns:proc="http://www.example.org/proc" id="_E2XY4QTfEeiR2oBMqV_uzQ" description="This template is used to load an XML / JSON structure in Microsoft SQL Server using the BULK statement or BCP utility.&#xD;&#xA;&#xD;&#xA;Data is first extracted to temporary files with a format optimized for these loaders, and then loaded into the target database.&#xD;&#xA;&#xD;&#xA;Depending on the chosen method, some prerequisites or specificities might apply, such as the need of temporary files to be located on the target SQL Server machine.&#xD;&#xA;&#xD;&#xA;We highly suggest having a look at the 'Load Method' parameter's documentation that details everything about them.&#xD;&#xA;&#xD;&#xA;Prerequisites:&#xD;&#xA;- This template requires a recent version of &quot;Load Xml to Rdbms&quot; template.&#xD;&#xA;&#xD;&#xA;Refer to the description of each Parameter for more information.&#xD;&#xA;&#xD;&#xA;History:&#xD;&#xA;19/04/2018 The 'Code Page' parameter is now optional&#xD;&#xA;10/04/2018 Issue &quot;Invalid character...&quot; when using complex separators with BCP fixed&#xD;&#xA;26/02/2018 Initialize template history" isBeginAction="false" name="LOAD XML to Mssql" nbCycles="-1" toleratedError="false">
  <parameter id="_JsCSEAUFEeihuKOWVDDWMg" description="If true, the exported file containing source data is sent to the target server through FTP.&#xD;&#xA;For this, a FTP folder Metadata Link must be added on the SQL Server target table's Metadata.&#xD;&#xA;The link must be named 'TARGET_FTP'.&#xD;&#xA;&#xD;&#xA;This is useful when using BULK mode in an environment where the Runtime is not located on the same machine as the target SQL server machine." metaInf="" name="enableFileTransport" type="Boolean" value="true"/>
  <parameter id="_HPOGvwTfEeiR2oBMqV_uzQ" description="If true, the temporary objects created during the load are removed at the end of the process." name="cleanTemporaryObjects" type="Boolean" value="true"/>
  <parameter id="_HPNfkwTfEeiR2oBMqV_uzQ" description="If true, a DISTINCT statement will be added on the step extracting source data into temporary files.&#xD;&#xA;This is used to avoid having duplicates." name="useDistinct" type="Boolean" value="false"/>
  <parameter id="_HPNflATfEeiR2oBMqV_uzQ" description="If true, the operations on the load tables will be executed through a transaction in NOCOMMIT mode.&#xD;&#xA;If false, the actions will be in AUTOCOMMIT mode." name="useTransactionOnWorkTables" type="Boolean" value="false"/>
  <parameter id="_HPOGvgTfEeiR2oBMqV_uzQ" description="If this parameter is set to true, a view based on the loaded data will be created.&#xD;&#xA;This view will be used in integration templates to retrieve loaded data, instead of querying directly the load tables.&#xD;&#xA;It will then be deleted at clean step." name="useView" type="Boolean" value="false"/>
  <parameter id="_5IBsQBfTEeim4ubowTYe8g" description="If set to true BCP utility will connect to SQL Server with a trusted connection using integrated security (option -T).&#xD;&#xA;If set to false, BCP will use user and password configured on the target metadata server to connect (options -U and -P)." name="useTrustedConnection" type="Boolean" value="false"/>
  <parameter id="_yx-IICj1Eeiazq4pceV8Rg" description="Specifies the method to use for loading the XML file into SQL Server.&#xD;&#xA;&#xD;&#xA;- BULK: &#xD;&#xA;The BULK statement is used to load the temporary files into SQL Server.&#xD;&#xA;This statement requires the temporary files to be located on the SQL Server machine to be able to load it.&#xD;&#xA;&#xD;&#xA;The 'enable File Transport' option can be used to automatically send them through FTP.&#xD;&#xA;Alternatively, you can install the Runtime executing the Mapping directly on the target SQL Server machine.&#xD;&#xA;&#xD;&#xA;To get more information on how to configure MS SQL Server metadata in this case please consult the following article on stambia.org&#xD;&#xA;http://stambia.org/doc/113-technology-articles/sql-server/221-using-bulk-load-on-a-distant-server-with-enablefiletransport-option&#xD;&#xA;&#xD;&#xA;- BCP:&#xD;&#xA;The BCP command line utility is used to load the temporary files into SQL Server.&#xD;&#xA;Make sure that the utility is available on the Runtime's machine for this mode to work." metaInf="&lt;metaInf id=&quot;value&quot;  value=&quot;BULK&quot;/>&#xD;&#xA;&lt;metaInf id=&quot;value&quot;  value=&quot;BCP&quot;/>" name="loadMethod" type="String" value="BULK"/>
  <parameter id="_HPOGywTfEeiR2oBMqV_uzQ" description="When this option is set to true, empty records are filtered out of the data flow." name="filterEmptyRecords" type="Boolean" value="true"/>
  <parameter id="_HPOGwwTfEeiR2oBMqV_uzQ" name="successIfNoFile" type="Boolean" value="false"/>
  <parameter id="_HPOGygTfEeiR2oBMqV_uzQ" name="emptyElementAsNull" type="Boolean" value="false"/>
  <parameter id="_HPOGugTfEeiR2oBMqV_uzQ" name="extractBase64BinaryToFile" type="Boolean" value="false"/>
  <parameter id="_HPOGwATfEeiR2oBMqV_uzQ" description="This parameter can be used to specify manually the path of the file to be loaded.&#xD;&#xA;If it is not set it will be retrieved from the source Metadata." name="inFileName" type="String"/>
  <parameter id="_HPOGvQTfEeiR2oBMqV_uzQ" description="Encoding that should be used to read the source file(s)" name="inFileEncoding" type="String" value=""/>
  <parameter id="_HPOGxQTfEeiR2oBMqV_uzQ" description="CodePage that will be specified to the BULK command when using the BULK mode.&#xD;&#xA;This helps the loader to convert text characters when loading data.&#xD;&#xA;&#xD;&#xA;In some cases, such as when loading an SQL Server instance installed on a Linux machine, the code page option is not supported by the server.&#xD;&#xA;To avoid the template to specify the option, simply put an empty value in the parameter.&#xD;&#xA;&#xD;&#xA;Please refer to Microsoft's documentation for further information about the available values.&#xD;&#xA;&#xD;&#xA;" name="codePage" type="String" value="ACP"/>
  <parameter id="_2vtUcAXUEeiujpz35f8reA" description="Character to use to separate the records in the temporary files." name="recordSeparator" type="String" value="\r\n"/>
  <parameter id="_5xiGsAXUEeiujpz35f8reA" description="Separator specified in BCP command to load the temporary files.&#xD;&#xA;Please note that BCP automatically prefixes '\n' with '\r'  which results in a row terminator '\r\n'." name="rowTerminator" type="String" value="\n"/>
  <parameter id="_HPNflgTfEeiR2oBMqV_uzQ" description="ASCII field separator used to separate the fields in the exported file." name="fieldSeparator" type="String" value="~"/>
  <parameter id="_HPNfoATfEeiR2oBMqV_uzQ" description="Character used to enclose character data in the temporary files." name="stringDelimiter" type="String" value=""/>
  <parameter id="_HPOGwQTfEeiR2oBMqV_uzQ" description="Decimal Symbol used in the exported file." name="numericSeparator" type="String" value="."/>
  <parameter id="_HPOGwgTfEeiR2oBMqV_uzQ" description="Name of the transaction when Transaction Mode is set to true." name="transactionName" type="String" value="T1"/>
  <parameter id="_HPNfkATfEeiR2oBMqV_uzQ" description="Number of lines for each batch when extracting data into temporary files." name="sqlBatchSize" type="String" value="1000"/>
  <parameter id="_m392MBr9Eeim4ubowTYe8g" description="Specify the number of records to be imported by BULK INSERT or BCP utility in each batch of data.&#xD;&#xA;If not specified all rows will be copied in one batch of data.&#xD;&#xA;&#xD;&#xA;Note that these two utilities treat each batch as a different transaction." name="importBatchSize" type="String"/>
  <parameter id="_bs8R0BfUEeim4ubowTYe8g" description="Allows to specify the maximum number of syntax errors that can occur before the BCP operation is cancelled (option -m)" name="maximumNumberOfErrors" type="Integer"/>
  <parameter id="_HPOGuwTfEeiR2oBMqV_uzQ" description="Directory in which the temporary files generated during the load are stored.&#xD;&#xA;Note that the Runtime must have access to it." name="workFolder" type="String" value="${/CORE_JAVA_TEMPORARY_FOLDER}$"/>
  <parameter id="_HPOGvATfEeiR2oBMqV_uzQ" description="" name="base64BinariesExtractDirectory" type="String" value=""/>
  <parameter id="_HPOGyATfEeiR2oBMqV_uzQ" name="errorDir" type="String" value=""/>
  <parameter id="_HPOGxgTfEeiR2oBMqV_uzQ" description="This parameter can be used when the source structure is surrounded with an additional root node in the physical file.&#xD;&#xA;The name of this additional node should then be defined in this parameter for the template to treat the file correctly.&#xD;&#xA;&#xD;&#xA;For instance, if the source structure Metadata is an XML file which looks like this:&#xD;&#xA;&lt;customers>&#xD;&#xA;   &lt;customer name=&quot;GIBBS&quot;>&#xD;&#xA;&lt;customers>&#xD;&#xA;&#xD;&#xA;But the real physical file contains an additional node that surrounds it like this:&#xD;&#xA;&lt;rootNode>&#xD;&#xA;    &lt;customers>&#xD;&#xA;       &lt;customer name=&quot;GIBBS&quot;>&#xD;&#xA;    &lt;customers>&#xD;&#xA;&lt;/rootNode>&#xD;&#xA;&#xD;&#xA;This parameter must then be set to 'rootNode'.&#xD;&#xA;&#xD;&#xA;Note that this works only for XML files." name="superRootName" type="String" value=""/>
  <parameter id="_HPNfngTfEeiR2oBMqV_uzQ" description="Number threads generating temporary files.&#xD;&#xA;When multiple files are loaded, it is possible to process the various files in different threads for better performance.&#xD;&#xA;Each thread will generate its own set of temporary files which will be loaded by the BULK statement or BCP utility." name="nbWriter" type="Integer" value="1"/>
  <parameter id="_HPNfkQTfEeiR2oBMqV_uzQ" name="splitPath" type="String" value=""/>
  <parameter id="_HPNfnwTfEeiR2oBMqV_uzQ" name="splitNbElement" type="Integer" value="1"/>
  <subProcess id="_HPNflwTfEeiR2oBMqV_uzQ" enable="true" isBeginAction="false" name="Clean" nbCycles="-1" toleratedError="false">
    <actionProcessRef id="_HPNfnATfEeiR2oBMqV_uzQ" isBeginAction="false" name="Clean" nbCycles="-1" toleratedError="false" targetName="../../../templates.generic/Xml/LOAD%20Xml%20to%20Rdbms.proc#_T9luMLyHEd6Ias_QQeWoUQ?fileId=_eNVMMrdDEd6wPMNq-9tkHw$type=proc$name=Clean?">
      <parameter id="_ZmTH4CkLEeimmYD12qprqw" name="fileExport" type="Boolean" value="true"/>
    </actionProcessRef>
    <templateType>L-TP.RDBMS.CLEANING</templateType>
  </subProcess>
  <subProcess id="_HPOGoATfEeiR2oBMqV_uzQ" enable="true" isBeginAction="false" name="Load" nbCycles="-1" toleratedError="false">
    <link id="_HPOGoQTfEeiR2oBMqV_uzQ" executionType="OK" generationType="OK_KO" mandatory="1" targetId="_HPNflwTfEeiR2oBMqV_uzQ?fileId=_E2XY4QTfEeiR2oBMqV_uzQ$type=proc$name=Clean?"/>
    <actionCode id="_HPOGowTfEeiR2oBMqV_uzQ" generationCondition="" enable="true" isBeginAction="false" name="Delete data files" nbCycles="-1" toleratedError="true" technology="com.indy.engine.actionCodes.FileDeleteActionCodeI">
      <link id="_HPOGpATfEeiR2oBMqV_uzQ" executionType="OK" generationType="OK_KO" mandatory="1" targetId="_HPOGpwTfEeiR2oBMqV_uzQ"/>
      <parameter id="_HPOGpQTfEeiR2oBMqV_uzQ" name="DEL_DIR" type="String" value="%x{md:paramValue($this,'workFolder')}x%"/>
      <parameter id="_HPOGpgTfEeiR2oBMqV_uzQ" name="DEL_INCLUDES" type="String" value="data_%x{$REF/tech:workName()}x%_*/*.dat"/>
    </actionCode>
    <actionProcessRef id="_HPOGpwTfEeiR2oBMqV_uzQ" isBeginAction="false" name="Unload" nbCycles="-1" toleratedError="false" targetName="../../../templates.generic/Xml/LOAD%20Xml%20to%20Rdbms.proc#_MWINkLyHEd6Ias_QQeWoUQ?fileId=_eNVMMrdDEd6wPMNq-9tkHw$type=proc$name=Load?">
      <link id="_tsaQYAUCEeihuKOWVDDWMg" executionType="OK" generationType="OK_KO" mandatory="1"/>
      <link id="_DaKL8CkCEeimmYD12qprqw" executionType="OK" generationType="OK_KO" mandatory="1" targetId="_1lukgAzuEeikU_5S7VA-GQ?fileId=_E2XY4QTfEeiR2oBMqV_uzQ$type=proc$name=Load?"/>
      <parameter id="_HPOGqQTfEeiR2oBMqV_uzQ" metaInf="" name="fileExportProperties" type="String" value="enable=true&#xD;&#xA;fileMask=%x{md:paramValue($this,'workFolder')}x%/data_[objectName]/[threadId].dat&#xD;&#xA;fileFormat=delimited&#xD;&#xA;timestampFormat=yyyy/MM/dd HH:mm:ss.SSS&#xD;&#xA;dateFormat=yyyy/MM/dd HH:mm:ss.SSS&#xD;&#xA;#TODO&#xD;&#xA;#timeFormat=&#xD;&#xA;booleanAsNumeric=true&#xD;&#xA;#addRecordNumber=false&#xD;&#xA;#TODO: support ASCII delimiters in order to specify 0x07 and 0x08 to have bullet-proof delimiters on any technology&#xD;&#xA;fieldSeparator=%x{md:paramValue($this,'fieldSeparator')}x%&#xD;&#xA;nullValueReplacement=%x{md:paramValue($this,'nullValueReplacement')}x%&#xD;&#xA;numericDecimalSeparator=%x{md:paramValue($this,'numericSeparator')}x%&#xD;&#xA;rowSep=%x{md:ifEmpty(md:paramValue($this,'recordSeparator'),'\r\n')}x%&#xD;&#xA;#localeLanguage=&#xD;&#xA;#numericPadChar=&#xD;&#xA;numericGroupingSeparator=&#xD;&#xA;#stringPadChar=&#xD;&#xA;stringDelimiter=%x{md:paramValue($this,'stringDelimiter')}x%&#xD;&#xA;#stringDelimiterReplacement&#xD;&#xA;"/>
    </actionProcessRef>
    <subProcess id="_1lukgAzuEeikU_5S7VA-GQ" isBeginAction="false" name="Load" nbCycles="-1" toleratedError="false">
      <subProcess id="_HPOGqgTfEeiR2oBMqV_uzQ" isBeginAction="false" name="Load" nbCycles="-1" repetitionQuery="$fields//datastore" repetitionVariableName="datastore" toleratedError="false">
        <parameter id="_mBeTAAXIEeiujpz35f8reA" name="realPathOnServer" type="String" value="%x{ &#xD;&#xA;if (not(exists($xslTargetFtp) and md:paramValue($this,'enableFileTransport')='true'))&#xD;&#xA;&#x9;then md:paramValue($this,'workFolder')&#xD;&#xA; &#x9;else md:ifEmpty(md:paramValue($this,'pathOnServer'),$xslTargetFtp/tech:systemPath())&#xD;&#xA;}x%"/>
        <actionCode id="_HPOGqwTfEeiR2oBMqV_uzQ" isBeginAction="false" name="FileWait" nbCycles="-1" toleratedError="false" technology="com.indy.engine.actionCodes.FileWaitActionCodeI">
          <bindLink id="_HPOGrATfEeiR2oBMqV_uzQ" bindType="DirectBind" targetId="_HPOGsgTfEeiR2oBMqV_uzQ"/>
          <bindLink id="_A8LF4AzPEeikU_5S7VA-GQ" bindType="DirectBind" targetId="_ASMPYAy8EeikU_5S7VA-GQ"/>
          <parameter id="_HPOGrQTfEeiR2oBMqV_uzQ" name="WAIT_FILE_DIR" type="String" value="%x{md:paramValue($this,'workFolder')}x%/data_%x{$datastore/@workName}x%"/>
          <parameter id="_HPOGrgTfEeiR2oBMqV_uzQ" name="WAIT_FILE_INCLUDES" type="String" value="*.dat"/>
          <parameter id="_HPOGrwTfEeiR2oBMqV_uzQ" name="WAIT_FILE_NB_FILES" type="Integer" value="%x{md:paramValue($this,'nbWriter')}x%"/>
          <parameter id="_HPOGsATfEeiR2oBMqV_uzQ" name="WAIT_FILE_TIMEOUT" type="Integer" value="2"/>
          <parameter id="_HPOGsQTfEeiR2oBMqV_uzQ" name="WAIT_FILE_POLLINT" type="Integer" value="1"/>
        </actionCode>
        <actionCode id="_HPOGsgTfEeiR2oBMqV_uzQ" generationCondition="not(md:paramValue($this, 'loadMethod')= 'BCP')" enable="true" isBeginAction="false" name="Load into target using BULK INSERT" nbCycles="-1" toleratedError="false" technology="com.indy.engine.actionCodes.JdbcActionCodeI">
          <link id="_HPOGswTfEeiR2oBMqV_uzQ" executionType="OK" generationType="OK" mandatory="1"/>
          <parameter id="_HPOGtATfEeiR2oBMqV_uzQ" name="SQL_CONNECTION" type="String" value="%targetConnection{$REF}%"/>
          <parameter id="_HPOGtQTfEeiR2oBMqV_uzQ" name="SQL_ACTION_TYPE" type="String" value="DDL_DML"/>
          <parameter id="_HPOGtgTfEeiR2oBMqV_uzQ" name="SQL_TRANSACTION_TYPE" type="String" value="AUTOCOMMIT"/>
          <code>BULK INSERT	%x{$datastore/@physicalName}x%
FROM 		'${../realPathOnServer}$/data_%x{$datastore/@workName}x%/:{FILE_NAME}:'
WITH		(
			FIELDTERMINATOR = '%x{md:paramValue($this,'fieldSeparator')}x%',
			ROWTERMINATOR = '%x{md:ifEmpty(md:paramValue($this,'rowTerminator'),'\n')}x%'
			%x{md:encloseIfNotEmpty(md:paramValue($this,'codePage'),',CODEPAGE = ''','''')}x%
			%x{md:encloseIfNotEmpty(md:paramValue($this, 'importBatchSize'), ',BATCHSIZE = ', ' ')}x%
			
		)
		
		</code>
        </actionCode>
        <actionCode id="_ASMPYAy8EeikU_5S7VA-GQ" generationCondition="md:paramValue($this, 'loadMethod')= 'BCP'" enable="true" isBeginAction="false" name="BCP load" nbCycles="-1" toleratedError="false" technology="com.indy.engine.actionCodes.ScriptingActionCodeI">
          <parameter id="_ASMPYQy8EeikU_5S7VA-GQ" description="Scripting language (Rhino, Jython, etc.)" name="SCRIPTING_LANGUAGE" type="String" value="rhino"/>
          <code>importPackage(java.lang);&#xD;
importPackage(java.io);&#xD;
&#xD;
dataFilePath = &quot;%x{md:paramValue($this,'workFolder')}x%/data_%x{$datastore/@workName}x%/:{FILE_NAME}:&quot;;&#xD;
tempFolder = &quot;${/CORE_JAVA_TEMPORARY_FOLDER}$&quot;;&#xD;
command = new java.lang.String();&#xD;
osName=System.getProperty(&quot;os.name&quot;).toLowerCase();&#xD;
&#xD;
ii=0;&#xD;
args=new Array();&#xD;
&#xD;
if (osName.startsWith(&quot;win&quot;)) {&#xD;
  command = command + &quot;cmd.exe /c &quot;;&#xD;
  args[ii++]=&quot;cmd.exe&quot;;&#xD;
  args[ii++]=&quot;/c&quot;;&#xD;
}&#xD;
&#xD;
/*&#xD;
command = command + &quot;bcp  %x{$datastore/@physicalName}x% IN \&quot;&quot; + dataFilePath + &quot;\&quot;&quot;;&#xD;
command = command + &quot; -c &quot;;&#xD;
if  ('%x{md:paramValue($this,'useTrustedConnection')}x%') {&#xD;
	command = command + &quot;-T &quot;;&#xD;
	}else{	&#xD;
		command = command + &quot;-U %x{$REF/ref:target()/tech:jdbcUser()}x% &quot;;&#xD;
	command = command + &quot;-P %x{$REF/ref:target()/tech:jdbcPassword()}x% &quot;; }&#xD;
command = command + &quot;-S \&quot;%x{replace($REF/ref:target()/tech:serverName(),&quot;\\&quot;,&quot;\\\\&quot;)}x%\&quot; &quot;;&#xD;
command = command + &quot;-t \&quot;%x{md:paramValue($this,'fieldSeparator')}x%\&quot; &quot;;&#xD;
command = command + &quot;-r \&quot;%x{md:ifEmpty(md:paramValue($this,'rowTerminator'),'\n')}x%\&quot; &quot;;&#xD;
%x{md:encloseIfNotEmpty(md:paramValue($this, 'maximumNumberOfErrors'), 'command = command + &quot;-m ', ' &quot;; ')}x%&#xD;
%x{md:encloseIfNotEmpty(md:paramValue($this, 'importBatchSize'), 'command = command + &quot;-b ', ' &quot;; ')}x%&#xD;
&#xD;
command = command.replace(/\n/g, &quot;\\n&quot;);*/&#xD;
&#xD;
args[ii++]=&quot;bcp&quot;;&#xD;
args[ii++]=&quot;%x{$datastore/@physicalName}x%&quot;;&#xD;
args[ii++]=&quot;IN&quot;;&#xD;
args[ii++]=dataFilePath;&#xD;
args[ii++]=&quot;-c&quot;;&#xD;
&#xD;
if  ('%x{md:paramValue($this,'useTrustedConnection')}x%' == 'true') {&#xD;
	args[ii++]=&quot;-T&quot;;&#xD;
}else{&#xD;
	args[ii++]=&quot;-U&quot;;&#xD;
	args[ii++]=&quot;%x{$REF/ref:target()/tech:jdbcUser()}x%&quot;;&#xD;
	args[ii++]=&quot;-P&quot;;&#xD;
	args[ii++]=&quot;%x{$REF/ref:target()/tech:jdbcPassword()}x%&quot;;&#xD;
}&#xD;
args[ii++]=&quot;-S&quot;;&#xD;
args[ii++]=&quot;%x{replace($REF/ref:target()/tech:serverName(),&quot;\\&quot;,&quot;\\\\&quot;)}x%&quot;;&#xD;
args[ii++]=&quot;-t&quot;;&#xD;
args[ii++]=&quot;\&quot;%x{md:paramValue($this,'fieldSeparator')}x%\&quot;&quot;;&#xD;
args[ii++]=&quot;-r&quot;;&#xD;
args[ii++]=&quot;\&quot;%x{replace(md:ifEmpty(md:paramValue($this,'rowTerminator'),'\n'),'\\n','\\\\n')}x%\&quot;&quot;;&#xD;
&#xD;
if  ('%x{md:paramValue($this,'maximumNumberOfErrors')}x%') {&#xD;
	args[ii++]=&quot;-m&quot;;&#xD;
	args[ii++]=&quot;%x{md:paramValue($this,'maximumNumberOfErrors')}x%&quot;;&#xD;
}&#xD;
&#xD;
if  ('%x{md:paramValue($this,'importBatchSize')}x%') {&#xD;
	args[ii++]=&quot;-b&quot;;&#xD;
	args[ii++]=&quot;%x{md:paramValue($this,'importBatchSize')}x%&quot;;&#xD;
}&#xD;
&#xD;
//__ctx__.publishVariable(&quot;./BCP_COMMAND&quot;,args, true);&#xD;
//__ctx__.publishVariable(&quot;./BCP_COMMAND2&quot;,command, true);&#xD;
&#xD;
var psr;&#xD;
try{&#xD;
osRuntime = Runtime.getRuntime();&#xD;
//osProc=osRuntime.exec(command, null, new File(tempFolder));&#xD;
osProc=osRuntime.exec(args, null, new File(tempFolder));&#xD;
&#xD;
_in = new java.lang.StringBuffer();&#xD;
_err = new java.lang.StringBuffer();&#xD;
&#xD;
psr=com.indy.engine.common.tools.ProcessWrapper.wrap(osProc);&#xD;
psr.setInputStringBuffer(_in,-1);&#xD;
psr.setErrorStringBuffer(_err,-1);&#xD;
ret=psr.waitFor();&#xD;
&#xD;
if (_err.length()>0){&#xD;
	__ctx__.publishVariable(&quot;./BCP_ERROR&quot;,_err.toString(), true);&#xD;
}&#xD;
&#xD;
&#xD;
if (_in.length()>0){&#xD;
	str_out = _in.toString();&#xD;
	__ctx__.publishVariable(&quot;./BCP_STDOUT&quot;,str_out, true);&#xD;
}&#xD;
&#xD;
if (ret!= 0) {&#xD;
	throw &quot;The SQL Server BCP utility raised an error.&quot;;&#xD;
}&#xD;
}finally{&#xD;
	if (psr!=null) {&#xD;
		psr.destroy();&#xD;
	}&#xD;
	if (str_out != null){&#xD;
		str_exp_label = new java.lang.String(&quot; lignes copi&quot;);&#xD;
		indexOfStart = str_out.lastIndexOf(&quot;\n&quot;,str_out.indexOf(str_exp_label))+1;&#xD;
		/*__ctx__.publishVariable(&quot;./IndexStart&quot;,str_out.lastIndexOf(&quot;\n&quot;,str_out.indexOf(str_exp_label))+2, true);*/&#xD;
		__ctx__.publishVariable(&quot;./SQL_NB_ROWS&quot;,str_out.slice(indexOfStart,str_out.indexOf(&quot; &quot;,indexOfStart)), &quot;Integer&quot;, true);&#xD;
	}&#xD;
&#xD;
}&#xD;
&#xD;
</code>
        </actionCode>
      </subProcess>
    </subProcess>
    <templateType>L-TP.RDBMS.LOADING</templateType>
    <xslVariable id="_HPOGuQTfEeiR2oBMqV_uzQ" code="$REF/ref:target()/mdj:xpath('$TARGET_FTP')" name="xslTargetFtp" type="xpath"/>
  </subProcess>
  <templateType>L-TP.RDBMS</templateType>
</proc:process>